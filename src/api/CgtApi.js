/**
 * CGT calculator
 * Capital Gains Tax Calculator
 *
 * OpenAPI spec version: V1.1
 * Contact: name@momentum.co.za
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CgtEndowmentEventsCalcResult', 'model/CgtEndowmentGgBranchEventsCalcRequest', 'model/CgtEndowmentZaEventsCalcRequest', 'model/CgtEstimatesResult', 'model/CgtLispEventsCalcResult', 'model/CgtLispGgNaturalEventsCalcRequest', 'model/CgtLispGgTrustEventsCalcRequest', 'model/CgtLispZaCompanyEventsCalcRequest', 'model/CgtLispZaEstimatesCalcRequest', 'model/CgtLispZaNaturalEventsCalcRequest', 'model/CgtLispZaTrustEventsCalcRequest', 'model/Error'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CgtEndowmentEventsCalcResult'), require('../model/CgtEndowmentGgBranchEventsCalcRequest'), require('../model/CgtEndowmentZaEventsCalcRequest'), require('../model/CgtEstimatesResult'), require('../model/CgtLispEventsCalcResult'), require('../model/CgtLispGgNaturalEventsCalcRequest'), require('../model/CgtLispGgTrustEventsCalcRequest'), require('../model/CgtLispZaCompanyEventsCalcRequest'), require('../model/CgtLispZaEstimatesCalcRequest'), require('../model/CgtLispZaNaturalEventsCalcRequest'), require('../model/CgtLispZaTrustEventsCalcRequest'), require('../model/Error'));
  } else {
    // Browser globals (root is window)
    if (!root.CgtCalculator) {
      root.CgtCalculator = {};
    }
    root.CgtCalculator.CgtApi = factory(root.CgtCalculator.ApiClient, root.CgtCalculator.CgtEndowmentEventsCalcResult, root.CgtCalculator.CgtEndowmentGgBranchEventsCalcRequest, root.CgtCalculator.CgtEndowmentZaEventsCalcRequest, root.CgtCalculator.CgtEstimatesResult, root.CgtCalculator.CgtLispEventsCalcResult, root.CgtCalculator.CgtLispGgNaturalEventsCalcRequest, root.CgtCalculator.CgtLispGgTrustEventsCalcRequest, root.CgtCalculator.CgtLispZaCompanyEventsCalcRequest, root.CgtCalculator.CgtLispZaEstimatesCalcRequest, root.CgtCalculator.CgtLispZaNaturalEventsCalcRequest, root.CgtCalculator.CgtLispZaTrustEventsCalcRequest, root.CgtCalculator.Error);
  }
}(this, function(ApiClient, CgtEndowmentEventsCalcResult, CgtEndowmentGgBranchEventsCalcRequest, CgtEndowmentZaEventsCalcRequest, CgtEstimatesResult, CgtLispEventsCalcResult, CgtLispGgNaturalEventsCalcRequest, CgtLispGgTrustEventsCalcRequest, CgtLispZaCompanyEventsCalcRequest, CgtLispZaEstimatesCalcRequest, CgtLispZaNaturalEventsCalcRequest, CgtLispZaTrustEventsCalcRequest, Error) {
  'use strict';

  /**
   * Cgt service.
   * @module api/CgtApi
   * @version V1.1
   */

  /**
   * Constructs a new CgtApi. 
   * @alias module:api/CgtApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the calcCgtEndowmentGGBranchEvents operation.
     * @callback module:api/CgtApi~calcCgtEndowmentGGBranchEventsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CgtEndowmentEventsCalcResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * For a gg branch endowment, calculate estimated capital gain/loss and tax for one or more cgt events.
     * @param {module:model/CgtEndowmentGgBranchEventsCalcRequest} cgtEndowmentGgBranchEventsCalcRequest Calculate cgt values for a set of cgt evants for a gg branch endowment.
     * @param {module:api/CgtApi~calcCgtEndowmentGGBranchEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CgtEndowmentEventsCalcResult>}
     */
    this.calcCgtEndowmentGGBranchEvents = function(cgtEndowmentGgBranchEventsCalcRequest, callback) {
      var postBody = cgtEndowmentGgBranchEventsCalcRequest;

      // verify the required parameter 'cgtEndowmentGgBranchEventsCalcRequest' is set
      if (cgtEndowmentGgBranchEventsCalcRequest == undefined || cgtEndowmentGgBranchEventsCalcRequest == null) {
        throw new Error("Missing the required parameter 'cgtEndowmentGgBranchEventsCalcRequest' when calling calcCgtEndowmentGGBranchEvents");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [CgtEndowmentEventsCalcResult];

      return this.apiClient.callApi(
        '/calcs/endowment/jurisdictions/gg_branch/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calcCgtEndowmentZaEvents operation.
     * @callback module:api/CgtApi~calcCgtEndowmentZaEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CgtEndowmentEventsCalcResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * For a za endowment, calculate estimated capital gain/loss and tax for one or more cgt events.
     * @param {module:model/CgtEndowmentZaEventsCalcRequest} cgtEndowmentZaEventsCalcRequest Calculate cgt values for a set of cgt evants for a za endowment.
     * @param {module:api/CgtApi~calcCgtEndowmentZaEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CgtEndowmentEventsCalcResult}
     */
    this.calcCgtEndowmentZaEvents = function(cgtEndowmentZaEventsCalcRequest, callback) {
      var postBody = cgtEndowmentZaEventsCalcRequest;

      // verify the required parameter 'cgtEndowmentZaEventsCalcRequest' is set
      if (cgtEndowmentZaEventsCalcRequest == undefined || cgtEndowmentZaEventsCalcRequest == null) {
        throw new Error("Missing the required parameter 'cgtEndowmentZaEventsCalcRequest' when calling calcCgtEndowmentZaEvents");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CgtEndowmentEventsCalcResult;

      return this.apiClient.callApi(
        '/calcs/endowment/jurisdictions/za/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calcCgtLispGgNaturalEvents operation.
     * @callback module:api/CgtApi~calcCgtLispGgNaturalEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CgtLispEventsCalcResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * For a gg lisp natural investor, calculate estimated capital gain/loss and tax for one or more cgt events.
     * @param {module:model/CgtLispGgNaturalEventsCalcRequest} cgtLispGgNaturalEventsCalcRequest Calculate cgt values for a set of cgt evants for a natural person with a gg lisp product.
     * @param {module:api/CgtApi~calcCgtLispGgNaturalEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CgtLispEventsCalcResult}
     */
    this.calcCgtLispGgNaturalEvents = function(cgtLispGgNaturalEventsCalcRequest, callback) {
      var postBody = cgtLispGgNaturalEventsCalcRequest;

      // verify the required parameter 'cgtLispGgNaturalEventsCalcRequest' is set
      if (cgtLispGgNaturalEventsCalcRequest == undefined || cgtLispGgNaturalEventsCalcRequest == null) {
        throw new Error("Missing the required parameter 'cgtLispGgNaturalEventsCalcRequest' when calling calcCgtLispGgNaturalEvents");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CgtLispEventsCalcResult;

      return this.apiClient.callApi(
        '/calcs/lisp/jurisdictions/gg/investor_types/natural/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calcCgtLispGgTrustEvents operation.
     * @callback module:api/CgtApi~calcCgtLispGgTrustEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CgtLispEventsCalcResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * For a gg lisp trust investor, calculate estimated capital gain/loss and tax for one or more cgt events.
     * @param {module:model/CgtLispGgTrustEventsCalcRequest} cgtLispGgTrustEventsCalcRequest Calculate cgt values for a set of cgt evants for a trust with a za lisp product.
     * @param {module:api/CgtApi~calcCgtLispGgTrustEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CgtLispEventsCalcResult}
     */
    this.calcCgtLispGgTrustEvents = function(cgtLispGgTrustEventsCalcRequest, callback) {
      var postBody = cgtLispGgTrustEventsCalcRequest;

      // verify the required parameter 'cgtLispGgTrustEventsCalcRequest' is set
      if (cgtLispGgTrustEventsCalcRequest == undefined || cgtLispGgTrustEventsCalcRequest == null) {
        throw new Error("Missing the required parameter 'cgtLispGgTrustEventsCalcRequest' when calling calcCgtLispGgTrustEvents");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CgtLispEventsCalcResult;

      return this.apiClient.callApi(
        '/calcs/lisp/jurisdictions/gg/investor_types/trust/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calcCgtLispZaCompanyEvents operation.
     * @callback module:api/CgtApi~calcCgtLispZaCompanyEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CgtLispEventsCalcResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * For a za lisp company investor, calculate estimated capital gain/loss and tax for one or more cgt events.
     * @param {module:model/CgtLispZaCompanyEventsCalcRequest} cgtLispZaCompanyEventsCalcRequest Calculate cgt values for a set of cgt evants for a company with a za lisp product.
     * @param {module:api/CgtApi~calcCgtLispZaCompanyEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CgtLispEventsCalcResult}
     */
    this.calcCgtLispZaCompanyEvents = function(cgtLispZaCompanyEventsCalcRequest, callback) {
      var postBody = cgtLispZaCompanyEventsCalcRequest;

      // verify the required parameter 'cgtLispZaCompanyEventsCalcRequest' is set
      if (cgtLispZaCompanyEventsCalcRequest == undefined || cgtLispZaCompanyEventsCalcRequest == null) {
        throw new Error("Missing the required parameter 'cgtLispZaCompanyEventsCalcRequest' when calling calcCgtLispZaCompanyEvents");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CgtLispEventsCalcResult;

      return this.apiClient.callApi(
        '/calcs/lisp/jurisdictions/za/investor_types/company/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calcCgtLispZaEstimates operation.
     * @callback module:api/CgtApi~calcCgtLispZaEstimatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CgtEstimatesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * For a za lisp, calculate estimated cgt values.
     * @param {module:model/CgtLispZaEstimatesCalcRequest} cgtLispZaEstimatesCalcRequest Calculate estimated cgt values for za lisp.
     * @param {module:api/CgtApi~calcCgtLispZaEstimatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CgtEstimatesResult}
     */
    this.calcCgtLispZaEstimates = function(cgtLispZaEstimatesCalcRequest, callback) {
      var postBody = cgtLispZaEstimatesCalcRequest;

      // verify the required parameter 'cgtLispZaEstimatesCalcRequest' is set
      if (cgtLispZaEstimatesCalcRequest == undefined || cgtLispZaEstimatesCalcRequest == null) {
        throw new Error("Missing the required parameter 'cgtLispZaEstimatesCalcRequest' when calling calcCgtLispZaEstimates");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CgtEstimatesResult;

      return this.apiClient.callApi(
        '/calcs/lisp/jurisdictions/za/estimates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calcCgtLispZaNaturalEvents operation.
     * @callback module:api/CgtApi~calcCgtLispZaNaturalEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CgtLispEventsCalcResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * For a za lisp natural investor, calculate estimated capital gain/loss and tax for one or more cgt events.
     * @param {module:model/CgtLispZaNaturalEventsCalcRequest} cgtLispZaNaturalEventsCalcRequest Calculate cgt values for a set of cgt evants for a natural person with a za lisp product.
     * @param {module:api/CgtApi~calcCgtLispZaNaturalEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CgtLispEventsCalcResult}
     */
    this.calcCgtLispZaNaturalEvents = function(cgtLispZaNaturalEventsCalcRequest, callback) {
      var postBody = cgtLispZaNaturalEventsCalcRequest;

      // verify the required parameter 'cgtLispZaNaturalEventsCalcRequest' is set
      if (cgtLispZaNaturalEventsCalcRequest == undefined || cgtLispZaNaturalEventsCalcRequest == null) {
        throw new Error("Missing the required parameter 'cgtLispZaNaturalEventsCalcRequest' when calling calcCgtLispZaNaturalEvents");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CgtLispEventsCalcResult;

      return this.apiClient.callApi(
        '/calcs/lisp/jurisdictions/za/investor_types/natural/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calcCgtLispZaTrustEvents operation.
     * @callback module:api/CgtApi~calcCgtLispZaTrustEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CgtLispEventsCalcResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * For a za lisp trust investor, calculate estimated capital gain/loss and tax for one or more cgt events.
     * @param {module:model/CgtLispZaTrustEventsCalcRequest} cgtLispZaTrustEventsCalcRequest Calculate cgt values for a set of cgt evants for a trust with a za lisp product.
     * @param {module:api/CgtApi~calcCgtLispZaTrustEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CgtLispEventsCalcResult}
     */
    this.calcCgtLispZaTrustEvents = function(cgtLispZaTrustEventsCalcRequest, callback) {
      var postBody = cgtLispZaTrustEventsCalcRequest;

      // verify the required parameter 'cgtLispZaTrustEventsCalcRequest' is set
      if (cgtLispZaTrustEventsCalcRequest == undefined || cgtLispZaTrustEventsCalcRequest == null) {
        throw new Error("Missing the required parameter 'cgtLispZaTrustEventsCalcRequest' when calling calcCgtLispZaTrustEvents");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CgtLispEventsCalcResult;

      return this.apiClient.callApi(
        '/calcs/lisp/jurisdictions/za/investor_types/trust/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
