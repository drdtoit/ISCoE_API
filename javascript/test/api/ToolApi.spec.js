/**
 * CGT calculator
 * Capital Gains Tax Calculator
 *
 * OpenAPI spec version: V1.1
 * Contact: name@momentum.co.za
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CgtCalculator);
  }
}(this, function(expect, CgtCalculator) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CgtCalculator.ToolApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ToolApi', function() {
    describe('calcCgtEndowmentGGBranchEvents', function() {
      it('should call calcCgtEndowmentGGBranchEvents successfully', function(done) {
        //uncomment below and update the code to test calcCgtEndowmentGGBranchEvents
        //instance.calcCgtEndowmentGGBranchEvents(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('calcCgtEndowmentZaEvents', function() {
      it('should call calcCgtEndowmentZaEvents successfully', function(done) {
        //uncomment below and update the code to test calcCgtEndowmentZaEvents
        //instance.calcCgtEndowmentZaEvents(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('calcCgtLispGgNaturalEvents', function() {
      it('should call calcCgtLispGgNaturalEvents successfully', function(done) {
        //uncomment below and update the code to test calcCgtLispGgNaturalEvents
        //instance.calcCgtLispGgNaturalEvents(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('calcCgtLispGgTrustEvents', function() {
      it('should call calcCgtLispGgTrustEvents successfully', function(done) {
        //uncomment below and update the code to test calcCgtLispGgTrustEvents
        //instance.calcCgtLispGgTrustEvents(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('calcCgtLispZaCompanyEvents', function() {
      it('should call calcCgtLispZaCompanyEvents successfully', function(done) {
        //uncomment below and update the code to test calcCgtLispZaCompanyEvents
        //instance.calcCgtLispZaCompanyEvents(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('calcCgtLispZaEstimates', function() {
      it('should call calcCgtLispZaEstimates successfully', function(done) {
        //uncomment below and update the code to test calcCgtLispZaEstimates
        //instance.calcCgtLispZaEstimates(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('calcCgtLispZaNaturalEvents', function() {
      it('should call calcCgtLispZaNaturalEvents successfully', function(done) {
        //uncomment below and update the code to test calcCgtLispZaNaturalEvents
        //instance.calcCgtLispZaNaturalEvents(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('calcCgtLispZaTrustEvents', function() {
      it('should call calcCgtLispZaTrustEvents successfully', function(done) {
        //uncomment below and update the code to test calcCgtLispZaTrustEvents
        //instance.calcCgtLispZaTrustEvents(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
